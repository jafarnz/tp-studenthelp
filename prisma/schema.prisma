// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Authentication Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core Models
model User {
  id               String    @id @default(cuid())
  email            String    @unique
  username         String    @unique
  name             String?
  password         String?   @db.Text
  image            String?
  profilePicture   String?
  school           String?
  diploma          String?
  studentYear      Int?
  bio              String?   @db.Text
  skillsets        String?   @db.Text // JSON string of skillsets
  isTemporary      Boolean   @default(false)
  emailVerified    DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  accounts         Account[]
  sessions        Session[]
  verificationCodes VerificationCode[]
  modules         UserModule[]
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  connections     Connection[] @relation("UserConnections")
  connectedTo     Connection[] @relation("ConnectedToUser")
  notifications   Notification[]

  @@index([email])
  @@index([username])
}

model VerificationCode {
  id        String   @id @default(cuid())
  code      String
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@index([userId])
}

model Module {
  id          String       @id @default(cuid())
  code        String       @unique
  name        String
  description String?      @db.Text
  users       UserModule[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([code])
}

model UserModule {
  id        String   @id @default(cuid())
  userId    String
  moduleId  String
  grade     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
  @@index([userId])
  @@index([moduleId])
}

model Message {
  id          String    @id @default(cuid())
  content     String
  type        String    @default("TEXT") // TEXT or IMAGE
  senderId    String
  receiverId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Connection {
  id            String   @id @default(cuid())
  fromUserId    String
  toUserId      String
  status        String   @default("PENDING") // PENDING, CONNECTED, REJECTED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  fromUser      User     @relation("UserConnections", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser        User     @relation("ConnectedToUser", fields: [toUserId], references: [id], onDelete: Cascade)

  @@unique([fromUserId, toUserId])
  @@index([fromUserId])
  @@index([toUserId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String   @db.Text
  data      String?  @db.Text // JSON string of additional data
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}
